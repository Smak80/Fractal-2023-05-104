Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"FrameworkDetectionExcludesConfiguration\">\r\n    <file type=\"web\" url=\"file://$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_17\" default=\"true\" project-jdk-name=\"20\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision ac75b5298bbead2318aed8cc0ba0e4e9e0f0ff52)
+++ b/.idea/misc.xml	(date 1702196474535)
@@ -4,7 +4,7 @@
   <component name="FrameworkDetectionExcludesConfiguration">
     <file type="web" url="file://$PROJECT_DIR$" />
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" default="true" project-jdk-name="20" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_18" default="true" project-jdk-name="20" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
Index: src/main/kotlin/Main.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import androidx.compose.desktop.ui.tooling.preview.Preview\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.material.*\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.*\r\nimport androidx.compose.runtime.*\r\nimport androidx.compose.runtime.snapshots.SnapshotStateList\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.compose.ui.window.*\r\nimport compose.icons.LineAwesomeIcons\r\nimport compose.icons.lineawesomeicons.GalacticRepublic\r\nimport compose.icons.lineawesomeicons.PaletteSolid\r\nimport compose.icons.lineawesomeicons.Save\r\nimport compose.icons.lineawesomeicons.UndoSolid\r\nimport drawing.FractalPainter\r\nimport drawing.convertation.ColorType\r\nimport drawing.convertation.Plane\r\nimport drawing.convertation.colorFunc\r\nimport gui.SaveOpenMenuItems\r\nimport gui.controls.dropdownMenuIcon\r\nimport gui.mainFractalWindow\r\nimport gui.video.workWithVideoDialog\r\nimport math.fractals.FractalData\r\nimport math.fractals.Mandelbrot\r\nimport tools.FileManager\r\nimport video.Cadre\r\nimport javax.swing.UIManager\r\n\r\n@Composable\r\n@Preview\r\nfun App(){\r\n    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName())\r\n//    var colorSchemeIndex by remember { mutableStateOf(2) }\r\n//    var fractalSchemeIndex by remember { mutableStateOf(1) }\r\n    val photoList = remember { SnapshotStateList<Cadre>() }\r\n    val fp = remember {FractalPainter(Mandelbrot)}\r\n    fp.colorFuncInner = colorFunc(1)\r\n    Mandelbrot.funcNum = 1\r\n    fp.plane = Plane(-2.0,1.0,-1.0,1.0, 0f, 0f)\r\n\r\n\r\n    MaterialTheme{\r\n        Scaffold(\r\n            topBar = {\r\n                var dynamicIterationsCheck by remember { mutableStateOf(false) }\r\n                var isMenuExpanded by remember { mutableStateOf(false) }\r\n\r\n                TopAppBar(\r\n                    title = {\r\n                        Text(\r\n                            modifier = Modifier,\r\n                            textAlign = TextAlign.Center,\r\n                            text = \"FractaLAB\"\r\n                        )\r\n                    },\r\n                    navigationIcon = {\r\n                        IconButton(onClick = { isMenuExpanded = true }) {\r\n                            Icon(LineAwesomeIcons.Save, \"Меню\")\r\n                            if (isMenuExpanded) {\r\n                                // Выпадающий список\r\n                                DropdownMenu(\r\n                                    expanded = isMenuExpanded,\r\n                                    onDismissRequest = { isMenuExpanded = false }\r\n                                ) {\r\n                                    SaveOpenMenuItems(\r\n                                        { isMenuExpanded = false\r\n                                            fp.plane?.let{\r\n                                                val fractalData = FractalData(it.xMin,it.xMax,it.yMin,it.yMax, 1)\r\n                                                FileManager.saveImageData(fractalData)\r\n                                            }\r\n                                        }, {\r\n                                            fp.plane?.let{\r\n                                                val fractalData = FractalData(it.xMin,it.xMax,it.yMin,it.yMax, 1)\r\n                                                FileManager.saveFractalData(fractalData)\r\n                                            }\r\n                                        }, {\r\n                                            val resData = FileManager.loadFractalData()\r\n                                            resData?.let { fd ->\r\n                                                fp.plane?.let { plane ->\r\n                                                    fp.plane = Plane(fd.xMin, fd.xMax, fd.yMin, fd.yMax, plane.width, plane.height)\r\n                                                }\r\n                                            }\r\n                                            fp.refresh = true\r\n                                        }, { isMenuExpanded = false }\r\n                                    )\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                    actions = {\r\n                        Row(\r\n                            modifier = Modifier\r\n                                .padding(horizontal = 10.dp, vertical = 2.dp),\r\n                            horizontalArrangement = Arrangement.spacedBy(16.dp),\r\n                            verticalAlignment = Alignment.CenterVertically,\r\n                        )\r\n                        {\r\n                            //Кнопка Назад\r\n\r\n                            IconButton(onClick = {fp.actionStack.pop()}\r\n                            ) { Icon(LineAwesomeIcons.UndoSolid, \"Назад\") }\r\n//                            IconButton(onClick = {\r\n//                                fp.plane = when(Mandelbrot.funcNum){\r\n//                                    2-> Plane(-1.0,2.0,-1.0,1.0, 0f, 0f)\r\n//                                    else-> Plane(-2.0,1.0,-1.0,1.0, 0f, 0f)\r\n//                                }\r\n//                            }\r\n//                            ) { Icon(FontAwesomeIcons.Solid.SyncAlt, \"Обновить\") }\r\n                            //Для Вызова Окна с Видео\r\n                            Row(\r\n                                modifier = Modifier\r\n                                    .background(\r\n                                        color = MaterialTheme.colors.secondaryVariant,\r\n                                        shape = RoundedCornerShape(50.dp)\r\n                                    )\r\n                            ) {\r\n                                var showVideoDialogBoolean by remember { mutableStateOf(false) }\r\n                                Button(\r\n                                    modifier = Modifier.padding(start = 16.dp),\r\n                                    onClick = { showVideoDialogBoolean = true },\r\n                                    colors = ButtonDefaults.buttonColors(backgroundColor = MaterialTheme.colors.secondary)\r\n                                ) {\r\n                                    Text(\"Создать Видео\")\r\n                                    if (showVideoDialogBoolean) {\r\n                                        Dialog(\r\n                                            onDismissRequest = { showVideoDialogBoolean = false },\r\n                                            properties = DialogProperties(dismissOnClickOutside = true)\r\n                                        ) {\r\n                                            workWithVideoDialog(fp.colorFuncInner,photoList) { showVideoDialogBoolean = false }\r\n                                        }\r\n                                    }\r\n                                }\r\n                                Spacer(modifier = Modifier.width(5.dp))\r\n                                IconButton(\r\n                                    onClick = {\r\n                                        fp.plane?.let {\r\n                                            photoList.add(Cadre(it,fp.colorFuncInner))\r\n                                        }\r\n                                    }\r\n                                ) {\r\n                                    Icon(Icons.Default.Add, \"Добавить Кадр\")\r\n                                }\r\n                            }\r\n                            //Выбор Цветовой Схемы\r\n                            dropdownMenuIcon(\r\n                                mapOf(\r\n                                    \"Логарифм Папа\" to {fp.apply {\r\n                                        fp.actionStack.push(fp.colorFuncID)\r\n                                        colorFuncID= ColorType.First\r\n                                        refresh = true\r\n                                    }},\r\n                                    \"Футболка Денчика\" to{fp.apply {\r\n                                        fp.actionStack.push(fp.colorFuncID)\r\n                                        colorFuncID= ColorType.Second\r\n                                        refresh = true\r\n                                    }},\r\n                                    \"Болото Шрека\" to {fp.apply {\r\n                                        fp.actionStack.push(fp.colorFuncID)\r\n                                        colorFuncID= ColorType.Third\r\n                                        refresh = true\r\n                                    }},\r\n                                ),\r\n                                LineAwesomeIcons.PaletteSolid\r\n                            )\r\n                            dropdownMenuIcon(\r\n                                mapOf(\r\n                                    \"Оригинал\" to {fp.apply {\r\n                                        Mandelbrot.funcNum = 1\r\n                                        plane = Plane(-2.0,1.0,-1.0,1.0, 0f, 0f)\r\n                                        refresh = true\r\n                                    }},\r\n                                    \"Перевертыш\" to {fp.apply {\r\n                                        Mandelbrot.funcNum = 2\r\n                                        plane = Plane(-1.0,2.0,-1.0,1.0, 0f, 0f)\r\n                                        refresh = true\r\n                                    }},\r\n                                    \"Кубический\" to {fp.apply {\r\n                                        plane = Plane(-2.0,1.0,-1.0,1.0, 0f, 0f)\r\n                                        Mandelbrot.funcNum = 3\r\n                                        refresh = true\r\n                                    }},\r\n                                    \"Дурацкий Кружок\" to {fp.apply {\r\n                                        Mandelbrot.funcNum = 4\r\n                                        refresh = true\r\n                                    }},\r\n                                ),\r\n                                LineAwesomeIcons.GalacticRepublic\r\n                            )\r\n                            // Checkbox для динамических итераций\r\n                            Row(\r\n                                horizontalArrangement = Arrangement.SpaceEvenly,\r\n                                verticalAlignment = Alignment.CenterVertically,\r\n                            ) {\r\n                                Checkbox(\r\n                                    checked = dynamicIterationsCheck,\r\n                                    onCheckedChange = {dynamicIterationsCheck = it},\r\n                                    modifier = Modifier.padding(start = 8.dp)\r\n                                )\r\n                                Text(\r\n                                    text = \"D. итерации\",\r\n                                    style = MaterialTheme.typography.body1.copy(\r\n                                        fontSize = 18.sp,\r\n                                        color = Color.White\r\n                                    )\r\n                                )\r\n                            }\r\n                        }\r\n                    },\r\n                    modifier = Modifier.height(65.dp)\r\n                )\r\n            },\r\n            modifier = Modifier.fillMaxSize()){\r\n            Box(\r\n                Modifier.fillMaxSize()\r\n            ){\r\n                mainFractalWindow(fp)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nfun main() = application {\r\n    Window(\r\n        onCloseRequest = ::exitApplication,\r\n        title = \"Множество Мандельброта\",\r\n        state = rememberWindowState(\r\n            width = 800.dp,\r\n            height = 600.dp,\r\n            placement = WindowPlacement.Floating,\r\n            position = WindowPosition(100.dp, 100.dp),\r\n            isMinimized = false\r\n        ),\r\n    ) {\r\n        App()\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/Main.kt b/src/main/kotlin/Main.kt
--- a/src/main/kotlin/Main.kt	(revision ac75b5298bbead2318aed8cc0ba0e4e9e0f0ff52)
+++ b/src/main/kotlin/Main.kt	(date 1702196651221)
@@ -20,7 +20,6 @@
 import compose.icons.lineawesomeicons.Save
 import compose.icons.lineawesomeicons.UndoSolid
 import drawing.FractalPainter
-import drawing.convertation.ColorType
 import drawing.convertation.Plane
 import drawing.convertation.colorFunc
 import gui.SaveOpenMenuItems
@@ -41,7 +40,7 @@
 //    var fractalSchemeIndex by remember { mutableStateOf(1) }
     val photoList = remember { SnapshotStateList<Cadre>() }
     val fp = remember {FractalPainter(Mandelbrot)}
-    fp.colorFuncInner = colorFunc(1)
+    fp.colorFunc = colorFunc(1)
     Mandelbrot.funcNum = 1
     fp.plane = Plane(-2.0,1.0,-1.0,1.0, 0f, 0f)
 
@@ -70,11 +69,9 @@
                                     onDismissRequest = { isMenuExpanded = false }
                                 ) {
                                     SaveOpenMenuItems(
-                                        { isMenuExpanded = false
-                                            fp.plane?.let{
-                                                val fractalData = FractalData(it.xMin,it.xMax,it.yMin,it.yMax, 1)
-                                                FileManager.saveImageData(fractalData)
-                                            }
+                                        {
+                                            isMenuExpanded = false
+                                            TODO("Реализовать функцию для сохранения изображения")
                                         }, {
                                             fp.plane?.let{
                                                 val fractalData = FractalData(it.xMin,it.xMax,it.yMin,it.yMax, 1)
@@ -133,7 +130,7 @@
                                             onDismissRequest = { showVideoDialogBoolean = false },
                                             properties = DialogProperties(dismissOnClickOutside = true)
                                         ) {
-                                            workWithVideoDialog(fp.colorFuncInner,photoList) { showVideoDialogBoolean = false }
+                                            workWithVideoDialog(fp.colorFunc,photoList) { showVideoDialogBoolean = false }
                                         }
                                     }
                                 }
@@ -141,7 +138,7 @@
                                 IconButton(
                                     onClick = {
                                         fp.plane?.let {
-                                            photoList.add(Cadre(it,fp.colorFuncInner))
+                                            photoList.add(Cadre(it,fp.colorFuncID))
                                         }
                                     }
                                 ) {
@@ -152,18 +149,15 @@
                             dropdownMenuIcon(
                                 mapOf(
                                     "Логарифм Папа" to {fp.apply {
-                                        fp.actionStack.push(fp.colorFuncID)
-                                        colorFuncID= ColorType.First
+                                        colorFuncID= colorFuncID()
                                         refresh = true
                                     }},
                                     "Футболка Денчика" to{fp.apply {
-                                        fp.actionStack.push(fp.colorFuncID)
-                                        colorFuncID= ColorType.Second
+                                        colorFuncID= colorFuncID(2)
                                         refresh = true
                                     }},
                                     "Болото Шрека" to {fp.apply {
-                                        fp.actionStack.push(fp.colorFuncID)
-                                        colorFuncID= ColorType.Third
+                                        colorFuncID= colorFuncID(3)
                                         refresh = true
                                     }},
                                 ),
Index: src/main/kotlin/video/VideoMaker.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package video\r\n\r\nimport drawing.convertation.Plane\r\nimport math.Complex\r\nimport org.jcodec.api.awt.AWTSequenceEncoder\r\nimport org.jcodec.common.io.NIOUtils\r\nimport org.jcodec.common.io.SeekableByteChannel\r\nimport org.jcodec.common.model.Rational\r\nimport java.awt.image.BufferedImage\r\nimport java.lang.Exception\r\nimport kotlin.math.*\r\n\r\n\r\n@Suppress(\"NAME_SHADOWING\")\r\nclass VideoMaker(private val conf: VideoConfiguration) {\r\n    enum class InterpolationMethod {\r\n        Linear,\r\n        CatmullRom\r\n    }\r\n    fun getVideo(method:InterpolationMethod) {\r\n        val images = when(method){\r\n            InterpolationMethod.CatmullRom -> getCadresCatmullRom()\r\n            InterpolationMethod.Linear -> getCadresLinear()\r\n        }\r\n        render(images)\r\n    }\r\n    private fun getCadresLinear(): List<BufferedImage> {\r\n        val cadresList: MutableList<BufferedImage> = mutableListOf()\r\n        val framesPerSegment = (conf.duration * conf.fps) / (conf.cadres.size - 1)\r\n        var currPlane = conf.cadres[0].plane.copy()\r\n        for (i in 0 until conf.cadres.size - 1) {\r\n            val stepDxMax = (conf.cadres[i + 1].plane.xMax - conf.cadres[i].plane.xMax) / framesPerSegment.toFloat()\r\n            val stepDxMin = (conf.cadres[i + 1].plane.xMin - conf.cadres[i].plane.xMin) / framesPerSegment.toFloat()\r\n            val stepDyMax = (conf.cadres[i + 1].plane.yMax - conf.cadres[i].plane.yMax) / framesPerSegment.toFloat()\r\n            val stepDyMin = (conf.cadres[i + 1].plane.yMin - conf.cadres[i].plane.yMin) / framesPerSegment.toFloat()\r\n            for (j in 0 until framesPerSegment) {\r\n                val bi = Cadre.getImageFromPlane(currPlane, conf.width, conf.height,conf.colorScheme)\r\n                cadresList.add(bi)\r\n                val nxmin = currPlane.xMin + stepDxMin\r\n                val nxmax = currPlane.xMax + stepDxMax\r\n                val nymin = currPlane.yMin + stepDyMin\r\n                val nymax = currPlane.yMax + stepDyMax\r\n\r\n                currPlane = Plane(nxmin,nxmax,nymin,nymax,conf.width,conf.height).also {\r\n                    println(\"${it.xMin} ${it.yMin} ${it.xMax} ${it.yMax}\")\r\n                }\r\n\r\n            }\r\n        }\r\n        return cadresList\r\n    }\r\n    private fun render(data: List<BufferedImage>) {\r\n        val out: SeekableByteChannel? = null\r\n        try {\r\n            val out = NIOUtils.writableFileChannel(conf.file);\r\n            println(out)\r\n            val encoder = AWTSequenceEncoder(out, Rational.R(conf.fps, 1))\r\n            data.forEach{\r\n                println(\"Идём\")\r\n                encoder.encodeImage(it)\r\n            }\r\n            encoder.finish();\r\n        }\r\n        finally {\r\n            NIOUtils.closeQuietly(out);\r\n        }\r\n    }\r\n    private fun getCenterOfShots(cadres: MutableList<Cadre>): List<Complex> =\r\n        cadres.map {\r\n            Complex(\r\n                (it.plane.xMin + it.plane.xMax) * 0.5,\r\n                (it.plane.yMin + it.plane.yMax) * 0.5\r\n            )\r\n    }\r\n\r\n    private fun getCadresCatmullRom(): List<BufferedImage> {\r\n        TODO(\"not yet implementated\")\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/video/VideoMaker.kt b/src/main/kotlin/video/VideoMaker.kt
--- a/src/main/kotlin/video/VideoMaker.kt	(revision ac75b5298bbead2318aed8cc0ba0e4e9e0f0ff52)
+++ b/src/main/kotlin/video/VideoMaker.kt	(date 1702196462404)
@@ -1,6 +1,8 @@
 package video
 
 import drawing.convertation.Plane
+import kotlinx.coroutines.delay
+import kotlinx.coroutines.runBlocking
 import math.Complex
 import org.jcodec.api.awt.AWTSequenceEncoder
 import org.jcodec.common.io.NIOUtils
@@ -8,7 +10,9 @@
 import org.jcodec.common.model.Rational
 import java.awt.image.BufferedImage
 import java.lang.Exception
+import java.util.stream.Collectors
 import kotlin.math.*
+import kotlin.time.measureTime
 
 
 @Suppress("NAME_SHADOWING")
@@ -17,12 +21,22 @@
         Linear,
         CatmullRom
     }
+
+    private var _frameHeight = 0f
+    private var _frameWidth = 0f
+    private var _planeHeight = 0f
+    private var _planeWidth = 0f
+
+    val aspectRatio
+        get() = _frameWidth.toDouble() / _frameHeight
+
     fun getVideo(method:InterpolationMethod) {
-        val images = when(method){
-            InterpolationMethod.CatmullRom -> getCadresCatmullRom()
-            InterpolationMethod.Linear -> getCadresLinear()
-        }
-        render(images)
+//        val images = when(method){
+//            InterpolationMethod.CatmullRom -> getCadresCatmullRom()
+//            InterpolationMethod.Linear -> getCadresLinear()
+//        }
+//        render(images)
+
     }
     private fun getCadresLinear(): List<BufferedImage> {
         val cadresList: MutableList<BufferedImage> = mutableListOf()
@@ -73,7 +87,5 @@
             )
     }
 
-    private fun getCadresCatmullRom(): List<BufferedImage> {
-        TODO("not yet implementated")
-    }
-}
\ No newline at end of file
+
+}
